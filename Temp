export function convertEnzymeToRTL(enzymeCode) {
  let rtlCode = enzymeCode;

  // 1. Remove Enzyme imports
  rtlCode = rtlCode.replace(/import.*enzyme.*;/g, "");

  // 2. Remove the Enzyme adapter setup
  rtlCode = rtlCode.replace(/Enzyme\.configure\{.*?\};/gs, "");

  // 3. Replace Enzyme-specific import statements with RTL imports
  rtlCode = rtlCode.replace(
    /import\s+React.*;/g,
    `import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';`
  );

  // 4. Replace `mount` with `render`
  rtlCode = rtlCode.replace(/Enzyme\.mount/g, "render");

  // 5. Replace `shallow` (if used) with `render`
  rtlCode = rtlCode.replace(/Enzyme\.shallow/g, "render");

  // 6. Replace `.simulate('click')` with `fireEvent.click`
  rtlCode = rtlCode.replace(/\.simulate\('click'\)/g, "fireEvent.click");

  // 7. Replace `.simulate('change', ...)` with `fireEvent.change`
  rtlCode = rtlCode.replace(
    /\.simulate\('change',\s*\{\s*target:\s*\{.*?value:\s*'(.*?)'.*?\}\s*\}\)/g,
    "fireEvent.change(screen.getByTestId('$1'), { target: { value: '$1' } })"
  );

  // 8. Replace `.simulate('blur', ...)` with `fireEvent.blur`
  rtlCode = rtlCode.replace(
    /\.simulate\('blur',\s*\{\s*target:\s*\{.*?value:\s*'(.*?)'.*?\}\s*\}\)/g,
    "fireEvent.blur(screen.getByTestId('$1'))"
  );

  // 9. Replace `.simulate('focus', ...)` with `fireEvent.focus`
  rtlCode = rtlCode.replace(/\.simulate\('focus'\)/g, "fireEvent.focus");

  // 10. Replace `.exists()` with `toBeInTheDocument()`
  rtlCode = rtlCode.replace(/\.exists\(\)/g, "toBeInTheDocument()");

  // 11. Replace `.props()` with manual assertions (commented for manual review)
  rtlCode = rtlCode.replace(
    /\.props\(\)/g,
    "// Replace manually: Use RTL queries like screen.getByTestId, screen.getByLabelText"
  );

  // 12. Replace `.find()` with `screen.getByTestId` (using a common data-testid or other RTL queries)
  rtlCode = rtlCode.replace(/component\.find\('(.*?)'\)/g, "screen.getByTestId('$1')");

  // 13. Replace `.at(index)` with `[index]`
  rtlCode = rtlCode.replace(/\.at\((\d+)\)/g, "[$1]");

  // 14. Replace `.setProps()` with comments to use `rerender` (manual intervention)
  rtlCode = rtlCode.replace(
    /\.setProps\((.*?)\)/g,
    "// Replace manually: Use `rerender` for updated props"
  );

  // 15. Replace `.text()` with `.textContent` or `screen.getByText` for assertions
  rtlCode = rtlCode.replace(
    /\.text\(\)/g,
    "// Replace manually: Use `.textContent` or `screen.getByText` for assertions"
  );

  // 16. Replace `component.state()` with comments to manually review state logic (as RTL doesn't support state directly)
  rtlCode = rtlCode.replace(
    /\.state\(\)/g,
    "// Replace manually: Use `useState` or `fireEvent` to test state logic in RTL"
  );

  // 17. Remove leftover Enzyme mentions (e.g., Enzyme-specific methods)
  rtlCode = rtlCode.replace(/Enzyme/g, "");

  // 18. Handle other direct RTL syntax like `screen.getByText`, `fireEvent`, etc.
  rtlCode = rtlCode.replace(/component\.find\((.*?)\)/g, "screen.getByTestId($1)");

  // 19. Handle `simulate('click')` with `fireEvent.click`
  rtlCode = rtlCode.replace(/\.simulate\('click'\)/g, "fireEvent.click");

  // 20. Replace `expect(screen.getByTestId(...)[0].simulate(CLICK))` with `fireEvent.click`
  rtlCode = rtlCode.replace(
    /expect\(screen\.getByTestId\((.*?)\)\[0\]\.simulate\('click'\)\)/g,
    "const nextButton = screen.getByRole('button', { name: /Next/i });\nfireEvent.click(nextButton);"
  );

  // 21. Replace `component.find(EMAIL_ADDRESS_ID).hostNodes()` with `screen.getByTestId(EMAIL_ADDRESS_ID)`
  rtlCode = rtlCode.replace(/component\.find\((.*?)\)\.hostNodes\(\)/g, "screen.getByTestId('$1')");

  return rtlCode;
}
